package problems

import (
	"fmt"
	"testing"
)

func Test_generateParenthesis(t *testing.T) {
	tests := []struct {
		args int
		want []string
	}{
		{3, []string{"((()))", "(()())", "(())()", "()(())", "()()()"}},
		{6, []string{}},
	}
	for _, tt := range tests {
		t.Run(fmt.Sprint(tt.args), func(t *testing.T) {
			if got := generateParenthesis(tt.args); !SameStringArray(got, tt.want) {
				gotMap := make(map[string]bool)
				gotWant := make(map[string]bool)

				for i := 0; i < len(got); i++ {
					gotMap[got[i]] = true
				}

				for i := 0; i < len(tt.want); i++ {
					gotWant[tt.want[i]] = true
				}

				for k := range gotWant {
					if !gotMap[k] {
						fmt.Println(k)
					}
				}

				for k := range gotMap {
					if !gotWant[k] {
						fmt.Println(k)
					}
				}

				//(()())(()())

				t.Errorf("generateParenthesis() = %v, want %v", got, tt.want)
			}
		})
	}
}
